function insertThankScript() {
    googleAnalytics();
    var diffTime = eventTime - timeNow;
    calculateOrderFlightDelay();
    calculateOrderLug();
    setInterval(function() {
        if (diffTime > 0) {
            diffTime = diffTime - 1;
            var duration = new Date(diffTime * 1e3).toUTCString().split(/ /)[4];
            $(".timer__time").text(duration)
        }
    }, 1e3);
    const FULL_DASH_ARRAY = 710;
    const TIME_LIMIT = 710;
    let timePassed = 10;
    let timeLeft = TIME_LIMIT - timePassed;
    let timerInterval = null;
    if ($(".timer__time").length) {
        startTimer()
    }
    $("#date_flight").daterangepicker({
        singleDatePicker: true,
        autoApply: true,
        minDate: new Date,
        locale: {
            applyLabel: `${accept}`,
            cancelLabel: `${cancel}`,
            fromLabel: `${lang_from}`,
            toLabel: `${lang_to}`,
            customRangeLabel: `${select_range}`,
            daysOfWeek: [`${su}`, `${mo}`, `${tu}`, `${we}`, `${th}`, `${fr}`, `${sa}`],
            monthNames: [`${january}`, `${february}`, `${mart}`, `${april}`, `${may}`, `${june}`, `${july}`, `${august}`, `${september}`, `${october}`, `${november}`, `${december}`],
            format: "YYYY-MM-DD"
        }
    });
    $("#date_flight_return").daterangepicker({
        singleDatePicker: true,
        autoApply: true,
        minDate: new Date,
        locale: {
            applyLabel: `${accept}`,
            cancelLabel: `${cancel}`,
            fromLabel: `${lang_from}`,
            toLabel: `${lang_to}`,
            customRangeLabel: `${select_range}`,
            daysOfWeek: [`${su}`, `${mo}`, `${tu}`, `${we}`, `${th}`, `${fr}`, `${sa}`],
            monthNames: [`${january}`, `${february}`, `${mart}`, `${april}`, `${may}`, `${june}`, `${july}`, `${august}`, `${september}`, `${october}`, `${november}`, `${december}`],
            format: "YYYY-MM-DD"
        }
    });
    function onTimesUp() {
        clearInterval(timerInterval)
    }
    function startTimer() {
        const circleDasharray = `${(calculateTimeFraction() * FULL_DASH_ARRAY).toFixed(0)} ${FULL_DASH_ARRAY.toFixed(0)}`;
        document.getElementById("base-timer-path-remaining").setAttribute("stroke-dasharray", circleDasharray);
        timerInterval = setInterval(()=>{
            timePassed = timePassed += 1;
            timeLeft = TIME_LIMIT - timePassed;
            setCircleDasharray();
            if (timeLeft === 0) {
                onTimesUp()
            }
        }
        , 1e3)
    }
    function calculateTimeFraction() {
        const rawTimeFraction = timeLeft / TIME_LIMIT;
        return rawTimeFraction - 1 / TIME_LIMIT * (1 - rawTimeFraction)
    }
    function setCircleDasharray() {
        const circleDasharray = `${(calculateTimeFraction() * FULL_DASH_ARRAY).toFixed(0)} ${FULL_DASH_ARRAY.toFixed(0)}`;
        document.getElementById("base-timer-path-remaining").setAttribute("stroke-dasharray", circleDasharray)
    }
    $(".form__radio input").on("click", function() {
        $(this).attr("checked")
    });
    $(".tariff-button").on("click", function() {
        $(this).closest(".form__radio").find(".tariff-button").removeClass("active");
        $(this).addClass("active")
    });
    const svgContainers = document.querySelectorAll(".svg-container");
    svgContainers.forEach(svgContainer=>{
        const svg = svgContainer.querySelector(".custom-svg");
        const hoverOverlay = svgContainer.querySelector(".hover-overlay");
        svg.addEventListener("click", ()=>{
            svgContainers.forEach(container=>{
                const otherOverlay = container.querySelector(".hover-overlay");
                if (container !== svgContainer) {
                    otherOverlay.style.display = "none"
                }
            }
            );
            if (hoverOverlay.style.display === "none" || !hoverOverlay.style.display) {
                hoverOverlay.style.display = "block"
            } else {
                hoverOverlay.style.display = "none"
            }
        }
        )
    }
    );
    function showOptions(option) {
        let allOptions = document.querySelectorAll(".form__radio");
        for (let i = 0; i < allOptions.length; i++) {
            allOptions[i].style.display = "none"
        }
        let selectedOptions = document.getElementById(option + "-product");
        selectedOptions.style.display = "block";
        if (window.innerWidth < 992) {
            selectedOptions.style.padding = "0 0 0 0"
        }
        let allButtons = document.querySelectorAll(".choose .radio__option");
        for (let i = 0; i < allButtons.length; i++) {
            allButtons[i].classList.remove("active");
            allButtons[i].classList.add("inactive")
        }
        document.querySelector('.choose [data-option="' + option + '"]').classList.add("active");
        document.querySelector('.choose [data-option="' + option + '"]').classList.remove("inactive");
        let insuranceLink = document.getElementById("terms");
        let bonus_descr = document.querySelector(".bonus__descr");
        if (option === "fligth-delay") {
            bonus_descr.textContent = discount_flight_delay;
            insuranceLink.href = "https://ekta.insure/wp-content/uploads/documents/terms_insurance_flight_delay_or_cancellation_EN_15.08.2023.pdf"
        } else {
            bonus_descr.textContent = discount_baggage;
            insuranceLink.href = "https://ic-ekta-public.s3.eu-central-1.amazonaws.com/luggage_offerta_26-09-22_en.pdf"
        }
    }
    function activateOption(option) {
        let allOptionsButtons = option.parentElement.querySelectorAll(".radio__option");
        for (let i = 0; i < allOptionsButtons.length; i++) {
            allOptionsButtons[i].classList.remove("active");
            allOptionsButtons[i].classList.add("inactive")
        }
        option.classList.add("active");
        option.classList.remove("inactive")
    }
    const carouselSlides = document.querySelector(".carousel-slides");
    const slides = carouselSlides.querySelectorAll(".carousel-slide");
    const numSlides = slides.length;
    let transform_num = 87;
    let currentIndex = 0;
    let startX = 0;
    let isDragging = false;
    let shift = 0;
    if (window.innerWidth < 992) {
        slides[0].style.height = "150px";
        slides[1].style.height = "150px";
        slides[2].style.height = "150px"
    }
    if (window.innerWidth < 768) {
        transform_num = 83
    }
    if (window.innerWidth < 577) {
        transform_num = 90
    }
    if (window.innerWidth < 479) {
        transform_num = 94
    }
    if (window.innerWidth < 381) {
        transform_num = 93;
    }
    window.addEventListener("resize", function() {
        if (window.innerWidth < 992) {
            slides[0].style.height = "150px";
            slides[1].style.height = "150px";
            slides[2].style.height = "150px"
        } else if (window.innerWidth > 991) {
            slides[0].style.height = "100%";
            slides[1].style.height = "100%";
            slides[2].style.height = "100%"
        }
    });
    function showSlide(index) {
        slides.forEach(slide=>{
            slide.classList.remove("active");
            slide.classList.add("inactive")
        }
        );
        slides[index].classList.add("active");
        carouselSlides.style.transform = `translateX(calc(-${index * (transform_num / numSlides)}% - ${index * 20}px))`
    }
    function handleTouchStart(event) {
        isDragging = true;
        startX = event.touches[0].clientX;
        shift = 0
    }
    function handleTouchMove(event) {
        if (!isDragging)
            return;
        const currentX = event.touches[0].clientX;
        shift = startX - currentX
    }
    function handleTouchEnd() {
        if (!isDragging)
            return;
        isDragging = false;
        if (shift > 50 && currentIndex < numSlides - 1) {
            currentIndex++
        } else if (shift < -50 && currentIndex > 0) {
            currentIndex--
        }
        showSlide(currentIndex)
    }
    carouselSlides.addEventListener("touchstart", handleTouchStart);
    carouselSlides.addEventListener("touchmove", handleTouchMove);
    carouselSlides.addEventListener("touchend", handleTouchEnd);
    showSlide(currentIndex);
    const carouselSlides2 = document.querySelector(".carousel-slides-2");
    const slides2 = carouselSlides2.querySelectorAll(".carousel-slide");
    const numSlides2 = slides2.length;
    let transform_num2 = 81;
    let currentIndex2 = 0;
    let startX2 = 0;
    let isDragging2 = false;
    let shift2 = 0;
    if (window.innerWidth < 991) {
        slides2[0].style.height = "214px";
        slides2[1].style.height = "214px";
        slides2[2].style.height = "214px";
        if (window.innerWidth < 768) {
            transform_num2 = 84
        }
        if (window.innerWidth < 577) {
            transform_num2 = 96
        }
        if (window.innerWidth < 479) {
            transform_num2 = 94.5
        }
        if (window.innerWidth < 381) {
            transform_num2 = 93
        }
    }
    window.addEventListener("resize", function() {
        if (window.innerWidth < 991) {
            slides2[0].style.height = "214px";
            slides2[1].style.height = "214px";
            slides2[2].style.height = "214px"
        } else if (window.innerWidth > 991) {
            slides2[0].style.height = "150px";
            slides2[1].style.height = "150px";
            slides2[2].style.height = "150px"
        }
    });
    function showSlide2(index) {
        slides2.forEach(slide=>{
            slide.classList.remove("active");
            slide.classList.add("inactive")
        }
        );
        slides2[index].classList.add("active");
        carouselSlides2.style.transform = `translateX(calc(-${index * (transform_num2 / numSlides2)}% - ${index * 20}px))`
    }
    function handleTouchStart2(event) {
        isDragging2 = true;
        startX2 = event.touches[0].clientX;
        shift2 = 0
    }
    function handleTouchMove2(event) {
        if (!isDragging2)
            return;
        const currentX = event.touches[0].clientX;
        shift2 = startX2 - currentX
    }
    function handleTouchEnd2() {
        if (!isDragging2)
            return;
        isDragging2 = false;
        if (shift2 > 50 && currentIndex2 < numSlides2 - 1) {
            currentIndex2++
        } else if (shift2 < -50 && currentIndex2 > 0) {
            currentIndex2--
        }
        showSlide2(currentIndex2)
    }
    carouselSlides2.addEventListener("touchstart", handleTouchStart2);
    carouselSlides2.addEventListener("touchmove", handleTouchMove2);
    carouselSlides2.addEventListener("touchend", handleTouchEnd2);
    showSlide2(currentIndex2);
    $(".tariff").on("click", function() {
        activateOption(this)
    });
    $(".product").on("click", function() {
        let optionValue = $(this).data("option");
        showOptions(optionValue)
    })
}
$(".insurer-form").validator().on("submit", function(e) {
    if (e.isDefaultPrevented()) {} else {
        e.preventDefault();
        let selectedProduct = document.querySelector(".product.active").getAttribute("data-option");
        let selectedTariff = "";
        let price = "";
        let is_return = checkReturnWay();
        if (selectedProduct === "fligth-delay") {
            selectedTariff = document.querySelector(".carousel-slides").querySelector(".carousel-slide.active").getAttribute("data-tariff");
            price = document.querySelector(".carousel-slides").querySelector(".carousel-slide.active").querySelector(".price-value").textContent
        } else {
            selectedTariff = document.querySelector(".carousel-slides-2").querySelector(".carousel-slide.active").getAttribute("data-tariff");
            price = document.querySelector(".carousel-slides-2").querySelector(".carousel-slide.active").querySelector(".price-value").textContent
        }
        if ($("#agreement_conditions").is(":checked")) {
            $("#agreement_conditions").val("true")
        } else {
            $("#agreement_conditions").val("false")
        }
        let data = $(".insurer-form").serializeArray();
        data.push({
            name: "selectedProduct",
            value: selectedProduct
        }, {
            name: "selectedTariff",
            value: selectedTariff
        }, {
            name: "return",
            value: is_return
        });
        $.ajax({
            type: "POST",
            url: "/InternalApi/sendForm",
            data: JSON.stringify(data),
            processData: false,
            contentType: false,
            success: function(resp) {
                if (resp.success === true) {
                    let payment_info = resp.data.payment_info;
                    googleAnalyticsThanks(selectedProduct, selectedTariff, price, resp.data.order_id);
                    window.open(payment_info.info.payment_link, "_self")
                } else {
                    setTimeout(function() {
                        $(".service-error").modal("show")
                    }, 1e3);
                    setTimeout(function() {
                        $(".service-error").modal("hide")
                    }, 4e3)
                }
            },
            error: function(resp) {
                setTimeout(function() {
                    $(".service-error").modal("show")
                }, 1e3);
                setTimeout(function() {
                    $(".service-error").modal("hide")
                }, 4e3)
            }
        })
    }
});
function myFunctionFooter() {
    document.getElementById("current_lang_footer").classList.toggle("show")
}
let payLuggage = function(invoice_data) {
    let payment = new Wayforpay;
    payment.run({
        merchantAccount: "ic_ekta_com",
        merchantDomainName: "vzr.ic-ekta.com",
        authorizationType: "SimpleSignature",
        merchantSignature: invoice_data.sign,
        orderReference: invoice_data.order_ref,
        orderNo: invoice_data.order_id,
        orderDate: invoice_data.order_date,
        amount: invoice_data.amount,
        currency: invoice_data.currency,
        productName: invoice_data.product_name,
        productPrice: invoice_data.price,
        productCount: invoice_data.count,
        clientFirstName: invoice_data.user.fname,
        clientLastName: invoice_data.user.lname,
        clientEmail: invoice_data.user.email,
        clientPhone: invoice_data.user.phone,
        serviceUrl: invoice_data.serviceUrl,
        language: `${lang}`,
        straightWidget: true
    }, function() {
        payment.closeit();
        location.href = "/"
    }, function() {
        payment.closeit();
        $("#declinePayment").modal("show")
    }, function() {
        payment.closeit();
        $("#successPayment").modal("show")
    })
};
function calculateOrderLug() {
    let is_return = checkReturnWay();
    let data = {
        return: is_return
    };
    $.ajax({
        type: "POST",
        url: "/InternalApi/getTariffsBuggage",
        data: JSON.stringify(data),
        processData: false,
        contentType: false,
        success: function(resp) {
            for (let i = 0; i < resp.length; i++) {
                if (resp[i].name === "Basic") {
                    let tariff = resp[i];
                    let coverage = Number(tariff.first_day_value) + Number(tariff.last_day_value);
                    $(".lug-base-compensation").text(`${coverage} USD`);
                    let price_old = Number(tariff.price_old).toFixed(2);
                    let price_new = Number(tariff.price_new).toFixed(2);
                    if (price_old === undefined || isNaN(price_old) || price_old === price_new) {
                        $(".lug-base-price-old-block").css("display", "none")
                    } else {
                        $(".lug-base-price-old").html(`${price_old}`)
                    }
                    $(".lug-base-price").html(`${price_new}`)
                } else if (resp[i].name === "Standard") {
                    let tariff = resp[i];
                    let coverage = Number(tariff.first_day_value) + Number(tariff.last_day_value);
                    $(".lug-standart-compensation").text(`${coverage} USD`);
                    let price_old = Number(tariff.price_old).toFixed(2);
                    let price_new = Number(tariff.price_new).toFixed(2);
                    if (price_old === undefined || isNaN(price_old) || price_old === price_new) {
                        $(".lug-standart-price-old-block").css("display", "none")
                    } else {
                        $(".lug-standart-price-old").html(`${price_old}`)
                    }
                    $(".lug-standart-price").html(`${price_new}`)
                } else {
                    let tariff = resp[i];
                    let coverage = Number(tariff.first_day_value) + Number(tariff.last_day_value);
                    $(".lug-premium-compensation").text(`${coverage} USD`);
                    let price_old = Number(tariff.price_old).toFixed(2);
                    let price_new = Number(tariff.price_new).toFixed(2);
                    if (price_old === undefined || isNaN(price_old) || price_old === price_new) {
                        $(".lug-premium-price-old-block").css("display", "none")
                    } else {
                        $(".lug-premium-price-old").html(`${price_old}`)
                    }
                    $(".lug-premium-price").html(`${price_new}`)
                }
            }
        },
        error: function(resp) {
            setTimeout(function() {
                $(".service-error").modal("show")
            }, 1e3);
            setTimeout(function() {
                $(".service-error").modal("hide")
            }, 4e3)
        }
    })
}
function checkReturnWay() {
    if ($(".flight-return").hasClass("d-none") && $(".date-return").hasClass("d-none")) {
        return false
    } else {
        return true
    }
}
function calculateOrderFlightDelay() {
    let is_return = checkReturnWay();
    let data = {
        return: is_return
    };
    $.ajax({
        type: "POST",
        url: "/InternalApi/getTariffsFlightDelay",
        processData: false,
        data: JSON.stringify(data),
        contentType: false,
        success: function(resp) {
            for (let i = 0; i < resp.length; i++) {
                if (resp[i].id === 4) {
                    let tariff = resp[i];
                    let price_old = Number(tariff.price_old).toFixed(2);
                    let price_new = Number(tariff.price_new).toFixed(2);
                    if (price_old === undefined || isNaN(price_old) || price_old === price_new) {
                        $(".fli-base-price-old-block").css("display", "none")
                    } else {
                        $(".fli-base-price-old").html(`${price_old}`)
                    }
                    $(".fli-base-price").html(`${price_new}`)
                } else if (resp[i].id === 5) {
                    let tariff = resp[i];
                    let price_old = Number(tariff.price_old).toFixed(2);
                    let price_new = Number(tariff.price_new).toFixed(2);
                    if (price_old === undefined || isNaN(price_old) || price_old === price_new) {
                        $(".fli-standart-price-old-block").css("display", "none")
                    } else {
                        $(".fli-standart-price-old").html(`${price_old}`)
                    }
                    $(".fli-standart-price").html(`${price_new}`)
                } else {
                    let tariff = resp[i];
                    let price_old = Number(tariff.price_old).toFixed(2);
                    let price_new = Number(tariff.price_new).toFixed(2);
                    if (price_old === undefined || isNaN(price_old) || price_old === price_new) {
                        $(".fli-premium-price-old-block").css("display", "none")
                    } else {
                        $(".fli-premium-price-old").html(`${price_old}`)
                    }
                    $(".fli-premium-price").html(`${price_new}`)
                }
            }
        },
        error: function(resp) {
            setTimeout(function() {
                $(".service-error").modal("show")
            }, 1e3);
            setTimeout(function() {
                $(".service-error").modal("hide")
            }, 4e3)
        }
    })
}
$(".add-button").on("click", function(e) {
    e.preventDefault();
    $(this).toggleClass("return");
    $(this).hasClass("return") ? $(this).html(remove_return) : $(this).html(add_return);
    $(".flight-return").toggleClass("d-none");
    $(".date-return").toggleClass("d-none");
    $("#flight_number_return").prop("required", !$("#flight_number_return").prop("required"));
    $("#date_flight_return").prop("required", !$("#date_flight_return").prop("required"));
    calculateOrderFlightDelay();
    calculateOrderLug()
});
function googleAnalytics() {
    let revenue = localStorage.getItem("ga_price");
    let coupon = localStorage.getItem("ga_promo");
    let name = localStorage.getItem("ga_tariff");
    let id = localStorage.getItem("ga_target");
    let quantity = localStorage.getItem("ga_tourists");
    let order_id = localStorage.getItem("order_id");
    if (revenue && name) {
        dataLayer.push({
            event: "purchase",
            ecommerce: {
                purchase: {
                    actionField: {
                        id: order_id,
                        revenue: revenue,
                        coupon: coupon
                    },
                    products: [{
                        name: name,
                        id: id,
                        price: revenue,
                        quantity: quantity
                    }]
                }
            }
        });
        localStorage.removeItem("ga_price");
        localStorage.removeItem("ga_promo");
        localStorage.removeItem("ga_tariff");
        localStorage.removeItem("ga_target");
        localStorage.removeItem("ga_tourists");
        localStorage.removeItem("order_id")
    }
}
function googleAnalyticsThanks(target, tariff, price, order_id) {
    dataLayer.push({
        event: "checkout",
        ecommerce: {
            checkout: {
                actionField: {
                    step: 1
                },
                products: [{
                    name: tariff,
                    id: target,
                    price: price,
                    quantity: 1
                }]
            }
        }
    });
    localStorage.setItem("ga_tariff", tariff);
    localStorage.setItem("ga_target", target);
    localStorage.setItem("ga_price", price);
    localStorage.setItem("ga_tourists", 1);
    localStorage.setItem("ga_promo", 0);
    localStorage.setItem("order_id", order_id)
}
$(document).mouseup(function(e) {
    var div = $(".dropbtn");
    if (!div.is(e.target) && div.has(e.target).length === 0) {
        $(".current_lang").fadeOut("slow", function() {
            $(this).removeClass("show")
        })
    }
});
$(".set_cookie").on("click", function() {
    let send_data = {
        cookie: true
    };
    $.post("/InternalApi/setCookie", JSON.stringify(send_data), function(res) {
        if (res.success) {
            $(".cookie").remove().fadeOut("slow")
        }
    })
});
